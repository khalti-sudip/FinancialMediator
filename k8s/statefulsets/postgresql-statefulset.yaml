apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: default
  labels:
    app: postgresql
    role: database
spec:
  serviceName: postgresql
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      role: database
  template:
    metadata:
      labels:
        app: postgresql
        role: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgresql-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgresql-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_HOST_AUTH_METHOD
          value: trust
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: "500m"
            memory: 1Gi
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
          subPath: postgres
        - name: postgres-config
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -h localhost -p 5432 -U postgres
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -h localhost -p 5432 -U postgres
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -h localhost -p 5432 -U postgres
          failureThreshold: 30
          periodSeconds: 10
          timeoutSeconds: 1
          initialDelaySeconds: 0
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          fsGroup: 999
      volumes:
      - name: postgres-config
        configMap:
          name: postgresql-config
          items:
          - key: init.sql
            path: init.sql
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi
      storageClassName: standard
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10
  podManagementPolicy: OrderedReady
  serviceName: postgresql
  selector:
    matchLabels:
      app: postgresql
      role: database
  template:
    metadata:
      labels:
        app: postgresql
        role: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgresql-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgresql-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_HOST_AUTH_METHOD
          value: trust
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: "500m"
            memory: 1Gi
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
          subPath: postgres
        - name: postgres-config
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -h localhost -p 5432 -U postgres
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -h localhost -p 5432 -U postgres
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -h localhost -p 5432 -U postgres
          failureThreshold: 30
          periodSeconds: 10
          timeoutSeconds: 1
          initialDelaySeconds: 0
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          fsGroup: 999
      volumes:
      - name: postgres-config
        configMap:
          name: postgresql-config
          items:
          - key: init.sql
            path: init.sql
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi
      storageClassName: standard
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10
  podManagementPolicy: OrderedReady
